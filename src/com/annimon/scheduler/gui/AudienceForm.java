/*
 * aNNiMON 2013 
 * http://annimon.com/
 */
package com.annimon.scheduler.gui;

import com.annimon.scheduler.dao.AudienceDAO;
import com.annimon.scheduler.dao.IDAO;
import com.annimon.scheduler.data.Audiences;
import com.annimon.scheduler.data.Entity;
import com.annimon.scheduler.model.AudienceModel;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author aNNiMON
 */
public class AudienceForm extends javax.swing.JFrame {
    
    private IDAO dao;
    private AudienceModel model;

    /**
     * Creates new form AudienceForm
     */
    public AudienceForm() {
        dao = new AudienceDAO();
        model = new AudienceModel(dao);
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableScroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        dataEditorPanel = new javax.swing.JPanel();
        numberLabel = new javax.swing.JLabel();
        numberSpinner = new javax.swing.JSpinner();
        typeLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        housingLabel = new javax.swing.JLabel();
        housingSpinner = new javax.swing.JSpinner();
        capacityLabel = new javax.swing.JLabel();
        capacitySpinner = new javax.swing.JSpinner();
        commandsPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();

        table.setAutoCreateRowSorter(true);
        table.setModel(model);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getSelectionModel().addListSelectionListener(new RowListener());
        tableScroll.setViewportView(table);

        getContentPane().add(tableScroll, java.awt.BorderLayout.CENTER);

        dataEditorPanel.setLayout(new java.awt.GridLayout(0, 2));

        numberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        numberLabel.setText("Номер");
        dataEditorPanel.add(numberLabel);

        numberSpinner.setModel(new javax.swing.SpinnerNumberModel(Short.valueOf((short)0), Short.valueOf((short)0), null, Short.valueOf((short)1)));
        dataEditorPanel.add(numberSpinner);

        typeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        typeLabel.setText("Тип");
        dataEditorPanel.add(typeLabel);

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(AudienceModel.AUDIENCE_TYPE));
        dataEditorPanel.add(typeComboBox);

        housingLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        housingLabel.setText("Корпус");
        dataEditorPanel.add(housingLabel);

        housingSpinner.setModel(new javax.swing.SpinnerNumberModel(Short.valueOf((short)0), Short.valueOf((short)0), null, Short.valueOf((short)1)));
        dataEditorPanel.add(housingSpinner);

        capacityLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        capacityLabel.setText("Вместимость");
        dataEditorPanel.add(capacityLabel);

        capacitySpinner.setModel(new javax.swing.SpinnerNumberModel(Short.valueOf((short)0), Short.valueOf((short)0), null, Short.valueOf((short)1)));
        dataEditorPanel.add(capacitySpinner);

        getContentPane().add(dataEditorPanel, java.awt.BorderLayout.PAGE_END);

        commandsPanel.setLayout(new javax.swing.BoxLayout(commandsPanel, javax.swing.BoxLayout.PAGE_AXIS));

        addButton.setText("Добавить");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        commandsPanel.add(addButton);

        deleteButton.setText("Удалить");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        commandsPanel.add(deleteButton);

        editButton.setText("Изменить");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        commandsPanel.add(editButton);

        getContentPane().add(commandsPanel, java.awt.BorderLayout.LINE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        model.insert(getEntity(-1));
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int rowSelected = table.getSelectedRow();
        if (rowSelected == -1) return;
        
        model.delete(table.convertRowIndexToModel(rowSelected), getEntity(rowSelected));
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        int rowSelected = table.getSelectedRow();
        if (rowSelected == -1) return;
        
        model.update(table.convertRowIndexToModel(rowSelected), getEntity(rowSelected));
    }//GEN-LAST:event_editButtonActionPerformed
    
    private Entity getEntity(int rowSelected) {
        int id = 0;
        if (rowSelected != -1) {
            id = (int) getValueAt(rowSelected, 0);
        }
        short number = (short) numberSpinner.getValue();
        short type = (short) typeComboBox.getSelectedIndex();
        short housing = (short) housingSpinner.getValue();
        short capacity = (short) capacitySpinner.getValue();

        Audiences au = new Audiences();
        au.setId(id);
        au.setNumber(number);
        au.setType(type);
        au.setHousing(housing);
        au.setCapacity(capacity);
        
        return au;
    }
    
    private Object getValueAt(int row, int column) {
        return table.getValueAt(row, table.convertColumnIndexToView(column));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AudienceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AudienceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AudienceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AudienceForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new AudienceForm().setVisible(true);
            }
        });
    }
    
    private class RowListener implements ListSelectionListener {
        
        @Override
        public void valueChanged(ListSelectionEvent event) {
            if (event.getValueIsAdjusting()) {
                return;
            }
            int rowSelected = table.getSelectedRow();
            if (rowSelected == -1) return;
            
            numberSpinner.setValue(getValueAt(rowSelected, 1));
            String type = (String) getValueAt(rowSelected, 2);
            typeComboBox.setSelectedIndex(type.equals(AudienceModel.AUDIENCE_TYPE[0]) ? 0 : 1);
            housingSpinner.setValue(getValueAt(rowSelected, 3));
            capacitySpinner.setValue(getValueAt(rowSelected, 4));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel capacityLabel;
    private javax.swing.JSpinner capacitySpinner;
    private javax.swing.JPanel commandsPanel;
    private javax.swing.JPanel dataEditorPanel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel housingLabel;
    private javax.swing.JSpinner housingSpinner;
    private javax.swing.JLabel numberLabel;
    private javax.swing.JSpinner numberSpinner;
    private javax.swing.JTable table;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
}
